<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Melanie VanderLugt</title>
    <description>I&#39;m a Ruby Developer, runner, and blogger from Seattle, WA. Welcome to my online portfolio of book reviews and software projects.</description>
    <link>http://www.melanievanderlugt.com/</link>
    <atom:link href="http://www.melanievanderlugt.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Wed, 22 Apr 2015 08:16:29 +0200</pubDate>
    <lastBuildDate>Wed, 22 Apr 2015 08:16:29 +0200</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Pomatillo</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Pomatillo makes planning and tracking your projects simple and easy.&lt;/p&gt;

&lt;p&gt;I know a lot of people who use the Pomodoro technique to boost their productivity. If you haven’t heard of it, here’s the TL/DR: you alternate timed, uninterrupted work segments with timed breaks. The theory is that a 25-minute focused work segment followed by a 5-minute break establishes an optimal workflow.&lt;/p&gt;

&lt;p&gt;I use this work method exclusively, and I like to count my work segments so know how much time I’m spending on my projects. It’s also really nice to have a measure of how productive I was on any given day. My husband and I even have a reward system set up that we call the “Bakery Dozen”. If one of us manages to get through a dozen pomodoros in one day, we get to go to a bakery for a piece of cake. Healthy, right?!&lt;/p&gt;

&lt;p&gt;Pomatillo was originally built as a project for Rails Rumble, a 48 hour hackathon my husband and I entered together in October 2014. We are continually adding new features and it is 100% free to use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pomatillo.com&quot; class=&quot;standout&quot;&gt;Try Pomatillo today!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;Using Pomatillo, you can easily create and track your projects and tasks. The built in timer will help you time your 25-minute work segments. Once your Pom is finished, the Pom count for your currently selected Work Task is incremented.&lt;/p&gt;

&lt;p class=&quot;centered&quot;&gt;&lt;img src=&quot;/img/pomatillo/pomatillo_dashboard.png&quot; alt=&quot;Pomatillo project planning page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also utilize our awesome reporting page to see how many Poms you completed each day over the last two weeks. The pie charts even show you where you’ve been spending most of your time.&lt;/p&gt;

&lt;p class=&quot;centered&quot;&gt;&lt;img src=&quot;/img/pomatillo/pomatillo_report.png&quot; alt=&quot;Pomatillo reports page&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2015 16:33:00 +0200</pubDate>
        <link>http://www.melanievanderlugt.com/2015/04/19/pomatillo/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/04/19/pomatillo/</guid>
        
        <category>projects</category>
        
        
      </item>
    
      <item>
        <title>API Project: Vimeo Roulette</title>
        <description>&lt;h2 id=&quot;vimeo-roulette&quot;&gt;Vimeo Roulette&lt;/h2&gt;

&lt;p&gt;I started futzing around with Vimeo’s oEmbed API a month ago, then realized I was lacking a solid JavaScript foundation. Googling things can only get you so far; sometimes you need an academic course start to finish. So down the rabbit hole I went!&lt;/p&gt;

&lt;p&gt;I lucked out and found a fantastic JavaScript course on &lt;a href=&quot;https://learnable.com/home&quot;&gt;Learnable&lt;/a&gt;. (Thanks, New Relic, for the free Learnable trial for using your services!)&lt;/p&gt;

&lt;p&gt;Vimeo’s &lt;a href=&quot;https://developer.vimeo.com/apis/oembed&quot;&gt;oEmbed API&lt;/a&gt; is absurdly easy to use. No API Keys are required because you’re just embedding a video on your own site. Once I figure out how to use their oEmbed API, all I had to do was use JavaScript to find a random Vimeo Video ID, make sure the video exists, and load it from Vimeo.&lt;/p&gt;

&lt;p&gt;To see the project, hop on over to my &lt;a href=&quot;/api/vimeo_roulette&quot; class=&quot;standout&quot;&gt;Vimeo Roulette&lt;/a&gt; page.&lt;/p&gt;

&lt;p&gt;There are a few things I’m hoping to add soon:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A button to “Spin Again”, so to speak, and fetch a new random video.&lt;/li&gt;
  &lt;li&gt;Error checking for times when Vimeo is down.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sat, 18 Apr 2015 19:45:00 +0200</pubDate>
        <link>http://www.melanievanderlugt.com/2015/04/18/Vimeo-Roulette-With-Vimeos-oEmbed-API/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/04/18/Vimeo-Roulette-With-Vimeos-oEmbed-API/</guid>
        
        <category>projects</category>
        
        
      </item>
    
      <item>
        <title>Book Review: Exceptional Ruby</title>
        <description>&lt;p&gt;Exceptional Ruby (published in 2011) was my second Avdi Grimm book in the last couple of months. This book is a great way to dip your toes into the exception handling pond without getting scared away. I’m a sucker for books that start off with a coding metaphor, and Avdi didn’t disappoint. In the intro, he compares exception handling to the toys and clothes a kid stuffs in his closet right before Mom comes to inspect his room. Like a kid cleaning his room, a lot of programmers leave exception handling until last minute, more of an “oh crap!” afterthought than an important well-planned piece of your program.&lt;/p&gt;

&lt;p&gt;Failure handling is the underdog that finally gets its time to shine in Exceptional Ruby. Avdi provides example after example of great ways to raise and handle exceptions, many of which I never would’ve thought up on my own out of the blue. If you read this book and don’t feel exceptionally enlightened (pun totally intended), you must be an exceptional genius already. (Is it bad form to use the same pun twice in one sentence?)&lt;/p&gt;

&lt;h2 id=&quot;a-few-quick-tidbits-i-never-want-to-forget&quot;&gt;A Few Quick Tidbits I Never Want to Forget&lt;/h2&gt;

&lt;p&gt;I’ll let you in on a secret. I mostly write book reviews for my own personal benefit. Sometimes there’s just not enough space in my head to store the info I want to keep in there. Blog posts are an extension of my brain that I can come back and find again later. In Exceptional Ruby, Avdi touched on a few things I know I’ll want to remember:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Ruby, &lt;code&gt;raise&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt; are synonyms. Neither is a Ruby keyword. Rather, they’re Kernel methods, so they &lt;strong&gt;can&lt;/strong&gt; be overriden!&lt;/li&gt;
  &lt;li&gt;The currently active exception is always stored in the global variable &lt;code&gt;$!&lt;/code&gt;. If there is no active exception, &lt;code&gt;$!&lt;/code&gt; will be nil.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code&gt;begin&lt;/code&gt; keyword is considered by some to be a code smell in Ruby. Instead of peppering your code with lots of &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;rescue&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt; blocks, take advantage of Ruby’s implicit begin blocks:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; def foo
   # main logic
 rescue
   # handle failures here. No explicit begin or end necessary, hooray!
 end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;A bare &lt;code&gt;rescue&lt;/code&gt; will catch only &lt;code&gt;StandardError&lt;/code&gt; and any derived classes. It will not catch these puppies:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;NoMemoryError&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;LoadError&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;SignalException&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Interrupt&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;ScriptError&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;exceptional-ideas-from-exceptional-ruby&quot;&gt;Exceptional Ideas from Exceptional Ruby&lt;/h2&gt;

&lt;h3 id=&quot;nested-exceptions&quot;&gt;Nested Exceptions&lt;/h3&gt;
&lt;p&gt;In Ruby, it’s possible to raise a new exception while we’re in the process of handling a previously incurred exception. When this occurs, the original exception is thrown away, completely gone, &lt;em&gt;unless&lt;/em&gt; you utilize the idea of Nested Exceptions that Avdi introduces in his book.&lt;/p&gt;

&lt;p&gt;Nested Exceptions hold a reference to the original exception so that it isn’t thrown away. Here’s how you’d do it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:original&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;vi&quot;&gt;@original&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Error A&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Error B&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Current failure: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Original failure: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running this code produces the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current failure: #&amp;lt;MyError: Error B&amp;gt;
Original failure: #&amp;lt;RuntimeError: Error A&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s happening here? We created our own error class called &lt;code&gt;MyError&lt;/code&gt; that stores any currently active exception in &lt;code&gt;original&lt;/code&gt; and sends &lt;code&gt;msg&lt;/code&gt; up to its parent &lt;code&gt;StandardError&lt;/code&gt; object via the call to &lt;code&gt;super&lt;/code&gt;. As we’d expect, our current failure is set to Error B (our most recent failure), which is of type &lt;code&gt;MyError&lt;/code&gt;. The key thing to note in this example is that we still have access to Error A &lt;em&gt;through&lt;/em&gt; Error B by calling &lt;code&gt;error.original&lt;/code&gt;. (Note that Error A is a &lt;code&gt;RuntimeError&lt;/code&gt; because this is the default exception type when you use just a bare &lt;code&gt;raise&lt;/code&gt;.)&lt;/p&gt;

&lt;h3 id=&quot;code-bulkheads&quot;&gt;Code Bulkheads&lt;/h3&gt;
&lt;p&gt;Nobody wants their code to sink like the Titanic. In ship-speak, bulkheads are placed between ship compartments so that a leak in one compartment will not spread to others. This enables a ship to stay afloat even if one of its compartments is completely flooded. The Titanic had inadequate bulkheads, whith turned out to be a devastating design flaw.&lt;/p&gt;

&lt;p&gt;Exceptional Ruby discusses the concept of erecting Bulkheads in your code to stop cascading failures. This isolates parts of your codes from others so that a failure in one area doesn’t cause other parts of the ship to go down.&lt;/p&gt;

&lt;p&gt;It’s a good idea to place bulkheads between your app and External Services and External processes. One easy way &lt;em&gt;Exceptional Ruby&lt;/em&gt; shows us how to do this is to rescue exceptions and write them to a log instead of bringing down the program:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# External Web Request&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTParty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.reddit.com/r/pics&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Everyone loves a good HTTParty&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;External Web Request encountered an Exception.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backtrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;circuit-breakers&quot;&gt;Circuit Breakers&lt;/h3&gt;
&lt;p&gt;Another way to handle failures is using the Circuit Breaker pattern, which Avdi references from Michael Nygard’s book &lt;em&gt;Release It!&lt;/em&gt; Circuit breakers are essentially a way of counting failures in particular areas of your App.&lt;/p&gt;

&lt;p&gt;When a threshold is met for one component of your program, a “circuit breaker” opens and that component isn’t permitted to operate. After a period of time, the circuit breaker enters a half-open state, where one failure can cause it to open again. Normal operation is the “closed” state. Check out Will Sargent’s &lt;a href=&quot;https://github.com/wsargent/circuit_breaker&quot;&gt;Ruby Implementation&lt;/a&gt;  of this pattern on Github.&lt;/p&gt;

&lt;h3 id=&quot;allow-for-user-injected-failure-policies&quot;&gt;Allow for User-injected Failure Policies&lt;/h3&gt;
&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; this exceptional method of handling exceptions. (There’s that pesky pun again…) It’s as simple as this - defer to the method caller!&lt;/p&gt;

&lt;p&gt;Avdi refers to this as “caller-supplied fallback strategy”. In my &lt;a href=&quot;http://www.melanievanderlugt.com/2015/02/02/book-review-confident-ruby/&quot;&gt;previous book review about Confident Ruby&lt;/a&gt;, I raved about using the Hash fetch method to assert the presence of hash keys.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Exceptional Ruby&lt;/em&gt;, I learned that you can pass a block to the fetch method that tells it how to respond to failures! This gives the caller the power to dictate the policy for missing keys, instead of having a policy foisted upon them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:required_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ZOMG that required key doesn&amp;#39;t exist!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can write your own methods so that you let callers determine what to do if something goes awry. Here’s a super simple example to show you how a method can be structured if you want users to provide their own way of handling unexpected behavior:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_book_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; by &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, I’ve assumed you have a book object with title and author attributes. If an instance of book doesn’t have either of these attributes, we have a problem. The caller needs to provide a way of handling this problem in the form of a code block. There are a couple ways the caller might handle this.&lt;/p&gt;

&lt;p&gt;Perhaps you want the &lt;code&gt;render_book_details&lt;/code&gt; method to return a default string if the book title and author aren’t present:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;print_book_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mybook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Book title or author not found.&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could also raise an exception instead of returning a default string. That’s easy too!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;print_book_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mybook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Book is missing title or author.&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The user can provide any number of code blocks to handle errors in this situation. What’s truly important is that the power lies with the caller, not with the method author.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Mar 2015 15:45:00 +0100</pubDate>
        <link>http://www.melanievanderlugt.com/2015/03/12/book-review-exceptional-ruby/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/03/12/book-review-exceptional-ruby/</guid>
        
        <category>book-review</category>
        
        
      </item>
    
      <item>
        <title>Book Review: Growth Hacker Marketing</title>
        <description>&lt;p&gt;To be honest, it will probably take me longer to write a review for this book than it would for you to just go out and read it. I’m serious. According to my Kindle, I’m was 7% into the book by the time I reached the Intro section. Almost every “page turn” on my Kindle earned me an additional 1% towards completion. This book is either very short or I am a magically fast reader. I’m afraid it’s probably the latter.&lt;/p&gt;

&lt;p&gt;Ryan Holiday’s Growth Hacker Marketing (published in 2013) is all about getting rid of all your old ideas about marketing. It’s full of stories about successful companies that used new, innovative techniques to become successful in remarkably short amounts of time. The bottom line of the book is that you should study your customers and build the product that they truly want, not the product that you think they want.&lt;/p&gt;

&lt;p&gt;What this book lacks in concrete step-by-step help in putting together your marketing plan, it makes up for in enthusiasm and motivation. There’s something about reading other companies’ success stories that gets my mind racing with possibilities and makes me excited to get to work. I didn’t find it as helpful or concrete as books like The Lean Startup or Traction, but I might re-read it later when I’m feeling low on motivation.&lt;/p&gt;

&lt;p&gt;The added bonus? Read this book and you’ll finally learn how Airbnb picked their name!&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Feb 2015 13:00:00 +0100</pubDate>
        <link>http://www.melanievanderlugt.com/2015/02/23/book-review-growth-hacker-marketing/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/02/23/book-review-growth-hacker-marketing/</guid>
        
        <category>book-review</category>
        
        
      </item>
    
      <item>
        <title>Book Review: Confident Ruby</title>
        <description>&lt;p&gt;I love the idea that a tech talk can evolve into a full fledged book, which is exactly how Avdi Grimm’s book, Confident Ruby, came about. According to the preface, Avdi gave his first tech talk, called “Confident Code”, to a room full of Rubyists in Baltimore in 2010. He goes on to say that his Confident Code talk receives the most positive feedback of any of his talks, and I think that’s for very good reason. The ideas that are laid out in this book are awesome.&lt;/p&gt;

&lt;p&gt;Before reading Confident Ruby, I hadn’t thought about categorizing code as timid or confident. We’ve all probably accused code of being poorly organized, convoluted, maybe even overly clever, but I previously only thought of timidity and confidence as people-oriented traits. It’s eye opening to think of code as being timid or confident. Is my code shy? Am I checking for nil all over the place? Is my code confidently laying out the story I want to tell? These are all questions Avdi’s book can help you answer about your own code. (The coding patterns in Confident Ruby can help you fix timidity, too!)&lt;/p&gt;

&lt;p&gt;Confident Ruby (published in 2013), is a must-read for any Ruby newbie. In fact, I enjoyed reading it so much that it might just join my read-again-every-year book list. It definitely earned itself a permanent home on my Kindle.&lt;/p&gt;

&lt;h2 id=&quot;the-3-concepts-from-confident-ruby-that-i-liked-the-most&quot;&gt;The 3 Concepts from Confident Ruby That I Liked the Most&lt;/h2&gt;

&lt;h3 id=&quot;your-code-should-tell-a-story&quot;&gt;#1: Your Code Should Tell a Story&lt;/h3&gt;

&lt;p&gt;Choose your own adventure books were a fun part of childhood, but there’s no place for them in code today. Trying to read spaghetti code is a little like trying to read a choose-your-own-adventure book from cover to cover. It’s confusing, there are too many things to keep track of, and you seem to jump backwards and forwards in time. There is no compelling narrative and a clear story doesn’t emerge.&lt;/p&gt;

&lt;p&gt;According to Confident Ruby, your code should have a compelling narrative; it should tell a clear story. In order to tell that story confidently and clearly, the book suggests organizing methods into Four Parts, in this order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Collecting Input &lt;/li&gt;
  &lt;li&gt;Performing Work&lt;/li&gt;
  &lt;li&gt;Delivering Output&lt;/li&gt;
  &lt;li&gt;Handling Failures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following this rule of thumb helps organize code into clearly defined chunks with clearly defined purposes. It leaves failure handling until the end of the method so it doesn’t distract from the method’s main purpose. I recommend checking out the companion video that comes with Confident Ruby to watch Avdi put this theory to work in some real-life out-there-in-the-wild code.&lt;/p&gt;

&lt;h3 id=&quot;use-fetch-instead-of-nil-checking&quot;&gt;#2: Use Fetch instead of nil checking&lt;/h3&gt;

&lt;p&gt;One pattern presented in Confident Ruby that I’ll immediately start utilizing in my projects is the use of #fetch to assert the presence of Hash keys. If you have a method that takes a hash as input, and some of your hash elements are non-optional, this is a great pattern to latch onto. Strip unnecessary “if” statements out of your method that test for the presence of the keys and instead call fetch.&lt;/p&gt;

&lt;p&gt;Instead of:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_first_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;required_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:required_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required_input&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;required input was not supplied!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can simply use this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_better_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;required_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:required_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Clear. Concise. Fabulous. It’s important to understand that the #fetch method is checking for the presence of the KEY; it has nothing to do with the actual value stored with that key. In the first method, it’s possible that if our required_input key holds the value “false”, we could erroneously raise an exception claiming that we weren’t provided with the right inputs. In the second method, if the value for the required_input key is FALSE, it’s still considered an acceptable input. As Avdi so eloquently puts it, by using #fetch, we are “differentiating between missing keys and falsey values”.&lt;/p&gt;

&lt;p&gt;But what is the coolest thing about using the #fetch method? You can send in a block that will be evaluated when the key you’re attempting to fetch is missing! Using this feature, it’s possible to add more descriptive messages to your exceptions, or raise different types of exceptions altogether.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_better_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;required_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:required_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The required_input was not supplied!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;h3 id=&quot;take-advantage-of-rubys-built-in-conversion-functions&quot;&gt;#3: Take advantage of Ruby’s Built-in Conversion Functions&lt;/h3&gt;

&lt;p&gt;Most Ruby Devs are familiar with conversion methods like #to_i and #to_a. Until I read Confident Ruby, I wasn’t aware that Ruby has a different set of capitalized conversion functions: Integer(), Array(), Float(), String(), Rational(), and Complex().&lt;/p&gt;

&lt;p&gt;In the book, Avdi explains that these capitalized conversion functions are great for converting inputs into your desired data type, but here’s the kicker - it only successfully converts values when there is a sensible way of doing it. As an example, you could look at this case:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; 2.1.2 :001 &amp;gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;this is definitely a string, not a number&amp;quot;&lt;/span&gt;.to_i
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 2.1.2 :002 &amp;gt; Integer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;this is definitely a string, not a number&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; ArgumentError: invalid value &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; Integer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;this is definitely a string, not a number&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using #to_i converts our string into zero. That doesn’t make a whole lot of sense to me, and I wouldn’t want to do that without knowing exactly why I’m doign it.&lt;/p&gt;

&lt;p&gt;In most cases, it just doesn’t make sense to convert a string into an integer. If you use #to_i instead of the more strict Integer conversion function, you could inadvertently be letting nonsensical values into your application. It can be a good idea to just alert the user with an Error when your program receives something it doesn’t make sense to convert.&lt;/p&gt;

&lt;h3 id=&quot;the-verdict-a-must-read&quot;&gt;The Verdict: A Must Read&lt;/h3&gt;
&lt;p&gt;If you’re a Rubyist and haven’t had a look at this book yet, I highly recommend giving it a read. It’s quick to get through, easy to absorb, and definitely deserves a spot on your shelf of code references. Plus, it contains emergency kittens. Perfect for times when those coding examples become a little bit too intense and you just need a chuckle.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Feb 2015 13:00:00 +0100</pubDate>
        <link>http://www.melanievanderlugt.com/2015/02/02/book-review-confident-ruby/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/02/02/book-review-confident-ruby/</guid>
        
        <category>book-review</category>
        
        
      </item>
    
      <item>
        <title>Oh Hey There, World.</title>
        <description>&lt;p&gt;Welcome to my online portfolio! I&#39;ll be posting book reviews, snippets about my work with various APIs, and writeups of various Rails side projects I&#39;ve been working on.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Jan 2015 20:30:00 +0100</pubDate>
        <link>http://www.melanievanderlugt.com/2015/01/20/a-blog-is-born/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/01/20/a-blog-is-born/</guid>
        
        
      </item>
    
  </channel>
</rss>
