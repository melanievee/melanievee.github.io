<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Melanie VanderLugt</title>
    <description>I&#39;m a Ruby Developer, runner, and blogger from Seattle, WA. Welcome to my online portfolio of book reviews and software projects.</description>
    <link>http://www.melanievanderlugt.com/</link>
    <atom:link href="http://www.melanievanderlugt.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 25 May 2015 20:34:19 -0700</pubDate>
    <lastBuildDate>Mon, 25 May 2015 20:34:19 -0700</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Coding Challenge: Removing Email Duplicates</title>
        <description>&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt;

&lt;p&gt;I was recently asked to solve the following coding challenge:&lt;/p&gt;

&lt;p&gt;Write a working function to remove all duplicates from an unsorted list of email addresses. Your resulting list should remain in the original order. Your function should be able to handle around 100,000 email addresses containing 50% randomly placed duplicates in well under 1 second on a typical modern laptop.&lt;/p&gt;

&lt;p&gt;I was allowed to assume any input data structure I wanted (I chose to shove all the emails into an array). I was asked not to use any built-in library functions that make this problem trivial. (That means I can’t use Ruby’s Array#uniq function, darnit!)&lt;/p&gt;

&lt;h2 id=&quot;build-some-tests&quot;&gt;Build Some Tests&lt;/h2&gt;

&lt;p&gt;I generally use RSpec for my Rails Application testing. Lately, however, I’ve been trying to improve my MiniTest skills, so that’s what I chose to use here.&lt;/p&gt;

&lt;p&gt;I put together a really simple MiniTest suite with enough tests to make sure my code is working. First, I wanted to make sure I set up my email list correctly. I wrote tests to verify that my &lt;code&gt;generate_email_list&lt;/code&gt; function generates a list that contains the number of emails I expected, and that half those emails are duplicates.&lt;/p&gt;

&lt;p&gt;Because I’m essentially writing a function that does exactly the same thing Array#uniq does, it’s really easy to write a quick test. I simply make sure that my &lt;code&gt;uniquify&lt;/code&gt; function does the same thing with the email array that &lt;code&gt;Array#uniq&lt;/code&gt; does.&lt;/p&gt;

&lt;p&gt;My simple test suite:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;minitest/autorun&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;email_sort&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmailsortTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Minitest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_email_list_setup&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;num_emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100_000&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_email_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_emails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_emails&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_uniquify&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_email_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;assert_equal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniquify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;generate-all-the-emails&quot;&gt;Generate All the Emails&lt;/h2&gt;

&lt;p&gt;Armed with my test suite, I’m ready to get to work. Let’s build that email list.&lt;/p&gt;

&lt;p&gt;It’s trivial to build up an array of unique emails that is half my desired length using a simple loop. After I have that in hand, I multiplied the array by &lt;code&gt;2&lt;/code&gt;. Array multiplication is interesting. Here’s a quick example of what happens when you multiply an array by an integer:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, I use &lt;code&gt;shuffle&lt;/code&gt; to make sure my array elements are in random order. In the end, I have an array on my hands that is made up of 50% duplicates, in random order.&lt;/p&gt;

&lt;p&gt;Here’s the full code to generate the email list, given a specific number of emails:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate_email_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_emails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.num_emails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user_&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@example.com&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-meat-of-the-problem-removing-duplicates&quot;&gt;The Meat of the Problem: Removing Duplicates&lt;/h2&gt;

&lt;p&gt;There are multiple ways to solve this problem. I could iterate through each email in my array, then iterate again through the array looking for and eliminating duplicates, but that means I’ll traverse my array N&lt;sup&gt;2&lt;/sup&gt; times for an array of N elements. That’s never good news.&lt;/p&gt;

&lt;p&gt;Enter the Hash. Looking up an element in a Hash is just an O(1) operation; no time wasted traversing an array - the element is there or it’s not. In the &lt;code&gt;uniquify&lt;/code&gt; function below, we iterate through the list of emails, adding the unique ones to the Hash as keys as we go.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;uniquify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dup_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;unique_entries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;dup_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;unique_entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique_entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;unique_entries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After we’ve traversed the original array of emails, we’re left with the Hash of unique emails. Each unique email is a key inside this hash, so we can use the &lt;code&gt;Hash#keys&lt;/code&gt; method to pull those out and return them from the function. (It’s good to note that the &lt;code&gt;Hash#keys&lt;/code&gt; method returns the keys in the order that they were added to the Hash, thus preserving the order of the original email list.)&lt;/p&gt;

&lt;h2 id=&quot;benchmarking---howd-i-do&quot;&gt;Benchmarking - How’d I do?&lt;/h2&gt;

&lt;p&gt;I wanted to make sure my solution processed 100,000 emails in well under 1 second, and I also wanted to see how I stood up to Ruby’s built-in &lt;code&gt;Array#uniq&lt;/code&gt; function, so I set up some benchmarking to measure my code:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bmbm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generate_email_list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100_000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;uniquify:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;unique_emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uniquify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;emails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;bm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;report&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;uniq:&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;unique_emails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uniq&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you’re not familiar with &lt;code&gt;Benchmark.bmbm&lt;/code&gt;, it’s handy because sometimes garbage collection can skew the results when you call just &lt;code&gt;Benchmark.bm&lt;/code&gt;. With &lt;code&gt;bmbm&lt;/code&gt;, the tests are run twice, once as a “rehearsal” and once “for real”. Ruby’s GC is forced to run after the rehearsal. The idea is that your results will be more accurate this way.&lt;/p&gt;

&lt;p&gt;Here’s the results from benchmarking this solution on my MacBook Air:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rehearsal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;---------------------------------------------&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniquify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;090000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;010000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;096580&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;060000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;000000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;060000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;064417&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;------------------------------------&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;160000&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniquify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;060000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;000000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;060000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;064737&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;060000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;000000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;060000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;062&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;987&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not bad! My &lt;code&gt;uniquify&lt;/code&gt; function seems to be holding up against Ruby’s built-in &lt;code&gt;Array#uniq&lt;/code&gt; method.&lt;/p&gt;

&lt;h2 id=&quot;a-struggle-between-space-and-time&quot;&gt;A Struggle Between Space and Time&lt;/h2&gt;

&lt;p&gt;For 1 million emails, this solution takes about 1 second to run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rehearsal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;---------------------------------------------&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniquify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;270000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;050000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;320000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;351997&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;540000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;030000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;570000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;605405&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;------------------------------------&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;890000&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniquify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;050000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;020000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;070000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;072724&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;130000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;020000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;156912&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once we get up to about 10 million emails in our array, it takes about 32 seconds to remove duplicates, but the Ruby process on my machine starts eating up memory.&lt;/p&gt;

&lt;p&gt;Benchmarking for 10 Million emails:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rehearsal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;---------------------------------------------&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniquify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;010000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;610000&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;620000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;354450&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;38&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;600000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;930000&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;39&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;530000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;525922&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;-----------------------------------&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;150000&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sec&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;     &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;real&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniquify&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;800000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;390000&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;190000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;790559&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;uniq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;      &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;070000&lt;/span&gt;   &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;460000&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;530000&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;37&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;216896&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For 10 million emails, the Ruby process maxes out at about 1.3 GB of memory. I only have 4 GB of memory on my machine, so processing a billion emails using my uniquify function is not going to be good news.&lt;/p&gt;

&lt;p&gt;For anything over 10 million emails, I’d consider eliminating the hash altogether. It might even be a good idea to try moving back to the N&lt;sup&gt;2&lt;/sup&gt; solution, where we would iterate through the array one email at a time, then iterate over the remaining elements in the array to remove duplicates. This solution would unquestionably take &lt;strong&gt;much&lt;/strong&gt; longer than the Hash method, but we’d be storing a lot less data in memory.&lt;/p&gt;

&lt;p&gt;If I could just get my hands on a computer with a huge amount of Memory, life would sure be easy wouldn’t it?&lt;/p&gt;
</description>
        <pubDate>Sat, 23 May 2015 12:00:00 -0700</pubDate>
        <link>http://www.melanievanderlugt.com/2015/05/23/email-filter-challenge/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/05/23/email-filter-challenge/</guid>
        
        <category>projects</category>
        
        
      </item>
    
      <item>
        <title>Pomatillo</title>
        <description>&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;Pomatillo makes planning and tracking your projects simple and easy.&lt;/p&gt;

&lt;p&gt;I know a lot of people who use the Pomodoro technique to boost their productivity. If you haven’t heard of it, here’s the TL/DR: you alternate timed, uninterrupted work segments with timed breaks. The theory is that a 25-minute focused work segment followed by a 5-minute break establishes an optimal workflow.&lt;/p&gt;

&lt;p&gt;I use this work method exclusively, and I like to count my work segments so know how much time I’m spending on my projects. It’s also really nice to have a measure of how productive I was on any given day. My husband and I even have a reward system set up that we call the “Bakery Dozen”. If one of us manages to get through a dozen pomodoros in one day, we get to go to a bakery for a piece of cake. Healthy, right?!&lt;/p&gt;

&lt;p&gt;Pomatillo was originally built as a project for Rails Rumble, a 48 hour hackathon my husband and I entered together in October 2014. We are continually adding new features and it is 100% free to use.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pomatillo.com&quot; class=&quot;standout&quot;&gt;Try Pomatillo today!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;
&lt;p&gt;Using Pomatillo, you can easily create and track your projects and tasks. The built in timer will help you time your 25-minute work segments. Once your Pom is finished, the Pom count for your currently selected Work Task is incremented.&lt;/p&gt;

&lt;p class=&quot;centered&quot;&gt;&lt;img src=&quot;/img/pomatillo/pomatillo_dashboard.png&quot; alt=&quot;Pomatillo project planning page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can also utilize our awesome reporting page to see how many Poms you completed each day over the last two weeks. The pie charts even show you where you’ve been spending most of your time.&lt;/p&gt;

&lt;p class=&quot;centered&quot;&gt;&lt;img src=&quot;/img/pomatillo/pomatillo_report.png&quot; alt=&quot;Pomatillo reports page&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Apr 2015 07:33:00 -0700</pubDate>
        <link>http://www.melanievanderlugt.com/2015/04/19/pomatillo/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/04/19/pomatillo/</guid>
        
        <category>projects</category>
        
        
      </item>
    
      <item>
        <title>API Project: Vimeo Roulette</title>
        <description>&lt;h2 id=&quot;vimeo-roulette&quot;&gt;Vimeo Roulette&lt;/h2&gt;

&lt;p&gt;I started futzing around with Vimeo’s oEmbed API a month ago, then realized I was lacking a solid JavaScript foundation. Googling things can only get you so far; sometimes you need an academic course start to finish. So down the rabbit hole I went!&lt;/p&gt;

&lt;p&gt;I lucked out and found a fantastic JavaScript course on &lt;a href=&quot;https://learnable.com/home&quot;&gt;Learnable&lt;/a&gt;. (Thanks, New Relic, for the free Learnable trial for using your services!)&lt;/p&gt;

&lt;p&gt;Vimeo’s &lt;a href=&quot;https://developer.vimeo.com/apis/oembed&quot;&gt;oEmbed API&lt;/a&gt; is absurdly easy to use. No API Keys are required because you’re just embedding a video on your own site. Once I figure out how to use their oEmbed API, all I had to do was use JavaScript to find a random Vimeo Video ID, make sure the video exists, and load it from Vimeo.&lt;/p&gt;

&lt;p&gt;To see the project, hop on over to my &lt;a href=&quot;/api/vimeo_roulette&quot; class=&quot;standout&quot;&gt;Vimeo Roulette&lt;/a&gt; page.&lt;/p&gt;

</description>
        <pubDate>Sat, 18 Apr 2015 10:45:00 -0700</pubDate>
        <link>http://www.melanievanderlugt.com/2015/04/18/Vimeo-Roulette-With-Vimeos-oEmbed-API/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/04/18/Vimeo-Roulette-With-Vimeos-oEmbed-API/</guid>
        
        <category>projects</category>
        
        
      </item>
    
      <item>
        <title>Book Review: Metaprogramming Ruby</title>
        <description>&lt;p&gt;Metaprogramming Ruby by Paolo Perrotta, published 2010. Recommended to Kevin by a teacher in his code class for people who consider themselves “intermediat Ruby devs”.&lt;/p&gt;

&lt;p&gt;“Ruby trusts you. Ruby treats you as a grown-up programmer. It gives you great power such as metaprogramming. But you need to remember that with great power comes great responsibility.”
    -matz, from the Forward of &lt;em&gt;Metaprogramming Ruby&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Metaprogramming can be thought of as code that writes other code. In this book, Paolo defines it as “writing code that manipulates language constructs at runtime.”&lt;/p&gt;

&lt;p&gt;Objects hold their own instance variables, but an Object’s Class holds its methods.&lt;/p&gt;

&lt;p&gt;Method Lookup: (duplicate drawing from Loc 928)
Modules - when you include a module, Ruby creates an “anonymous” class that is places around that Module, then sticks that into the chain right above the class where you called include. What if multiple modules are called? Use the example in 1.6 Quiz (loc 1045) as a guide. Create a couple modules - maybe use colors? Call one Module correct colors, and one incorrect colors. Make a confusing call stack and create an example where including the modules in the correct order would fix the problem. OR, create an example where you have two modules with render_user and one has middle name and one doesn’t. That’s better.&lt;/p&gt;

&lt;p&gt;Private Methods:
You can’t call a private method without an explicit receiver. What does this mean? If the method isn’t found somewhere in the method lookup chain (meaning that it must be an ancestor or module that was included), then you can’t call it.&lt;/p&gt;

&lt;p&gt;Creating Methods on the Fly&lt;/p&gt;

&lt;p&gt;Dynamic Methods with obj.send(:some_method, 3) or with define_method (loc 1352).
Use introspection to automate thing even further. For example, if you find yourself looking at a list of items and typing them into your program, stop and figure out how to import those automatically. Then if the list changes in the future, your script doesn’t have to be changed manually. It automagically grabs whatever new list items may be there.&lt;/p&gt;

&lt;p&gt;Method Missing:
You know that pesky “NoMethodError” message you get if you call a method that doesn’t exist? Magic happens when you play around with your Object’s method_missing method. You can override it and cause great things to happen if someone calls a method that doesn’t exist for your Object. You can create methods dynamically using method_missing, which can help you prevent massive amounts of duplication in your code.  ??Link to someone else’s blog post with a good writeup on Method Missing??? One gotcha - methods created using method_missing will not respond to respond_to? as you’d expect. You have to override respond_to? when you override method_missing if you don’t want it to lie. (see loc 1857 - don’t forget to call Super). Also be sure method_missing calls super. It’s important to make sure that a method doesn’t exist if you’re falling back on method_missing. If your object inherits a method from somewhere, that method will win and your method_missing won’t be called. You an get around this by undefining these conflicting methods, creating a BlankSlate object. Try inheriting from BasicObject instead of Object, perhaps? This wasn’t in the book but would be interesting to play with.&lt;/p&gt;

&lt;p&gt;Use of Blocks as Closures to flatten the scope. Look at Loc 2485 for the good example. This helps you get around scope gates (class, module, and def). Wrap-up on Loc 2567 summarizes things well.&lt;/p&gt;

&lt;p&gt;Use instance_eval and instance_exec to break encapsulation. This is usually a bad idea, but can be helpful for testing. It sort of lets you violate the boundaries of your object, breaking into its scope.&lt;/p&gt;

&lt;p&gt;EXTEND AND EIGENCLASSES
What in the world does “Extend” do? To understand what extend mymodule does to a class or object, you first have to understand the concept of an eigenclass or metaclass. The eigenclass of a Class is where class methods live. The eigenclass of an object is the place where singleton methods on that object live.&lt;/p&gt;

&lt;p&gt;For example, if you had this code:
class MyClass
  def self.my_method
    “Hello World”
  end
end&lt;/p&gt;

&lt;p&gt;Then my_method lives in MyClass’s eigenclass. Another way to add methods into an object’s eigenclass is like this:
class MyClass
  class « self
    def my_method
      “Hello World”
    end
  end
end&lt;/p&gt;

&lt;p&gt;Both of these previous examples add the class method “my_method” to MyClass, and this class method lives in MyClass’s eigenclass.&lt;/p&gt;

&lt;p&gt;Before learning about eigenclasses, I always was confused about the difference between include and extend. With the concept of eigenclasses firmly cemented in my brain, this got a lot easier.&lt;/p&gt;

&lt;p&gt;Let’s talk about the use of “include”. Say I have a module:
module MyModule
  def self.my_method
    “Hello World”
  end
end&lt;/p&gt;

&lt;p&gt;And I have a class, where I want my_method to be available as a class method:
class MyClass
  include MyModule
end&lt;/p&gt;

&lt;p&gt;This doesn’t work! If you try to call &lt;code&gt;MyClass.my_method&lt;/code&gt;, you’ll be met with a &lt;code&gt;NoMethodError&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Remembering what I noted above, that class methods live in a class’s eigenclass, I could do something like this:
class MyClass
  class « self
    include MyModule
  end
end&lt;/p&gt;

&lt;p&gt;Now when we call &lt;code&gt;MyClass.my_method&lt;/code&gt;, we’re greeted with a cheerful &lt;code&gt;Hello World&lt;/code&gt;. Fantastic. But there’s an even more clear, concise way of including MyModule in MyClass’s eigenclass. Enter &lt;code&gt;extend&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;class MyClass
  extend MyModule
end&lt;/p&gt;

&lt;p&gt;It turns out that using &lt;code&gt;extend&lt;/code&gt; simply includes a module into that object’s eigenclass. So again, MyClass.my_method will return &lt;code&gt;Hello World&lt;/code&gt;. That was sure easy!&lt;/p&gt;

&lt;p&gt;What in the world is an “Around Alias”&lt;/p&gt;

&lt;p&gt;In Ruby, it’s possible to define an alias for a method, like this:&lt;/p&gt;

&lt;p&gt;class MyClass
  def myMethod
    “Hello World!”
  end
  alias :aliasMethod :myMethod
end&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;greeting = MyClass.new
greeting.myMethod
 =&amp;gt; “Hello World!”
greeting.aliasMethod
 =&amp;gt; “Hello World!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using myMethod and aliasMethod both point to the same thing. What happens to aliasMethod if we re-open MyClass and alter myMethod like this?&lt;/p&gt;

&lt;p&gt;class MyClass
  def myMethod
    “Goodbye World”
  end
end&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;greeting.myMethod
 =&amp;gt; “Goodbye World”
greeting.aliasMethod
 =&amp;gt; “Hello World!”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What is happening here? It turns out that aliasMethod still refers to the original method. This is a very important thing to learn, because it means that we can create copies of methods using alias, then override the method while still keeping a hold of the original method! That sounds really confusing, so let’s clear it up with an example.&lt;/p&gt;

&lt;p&gt;Let’s say you want to play a prank on a coworker, and override the String#+ method so that it adds “LOL” in between any strings they choose to combine using &lt;code&gt;+&lt;/code&gt;. We’re seeking this behavior:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Hello” « ” there”
 =&amp;gt; “Hello LOL there”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You might be tempted to just override &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; like this:&lt;/p&gt;

&lt;p&gt;class String
  def «(stringy)
    self « ” LOL” « stringy
  end
end&lt;/p&gt;

&lt;p&gt;But if you do that, you’ll be met with a nasty error. This is because the new method we’re defining uses itself to produce output, which creates a circular dependency. Somehow, we need to keep a hold of the original &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; method. This is where Around Aliases come in! We create an alias for the original &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; method, and use it to do the heavy lifting for us, like this:&lt;/p&gt;

&lt;p&gt;class String
  alias :old_shovel :«
  def «(stringy)
    self.old_shovel(“ LOL”).old_shovel(stringy)
  end
end&lt;/p&gt;

&lt;p&gt;Does it work? Let’s check:
&amp;gt; “Hello” « ” there”
 =&amp;gt; “Hello LOL there”&lt;/p&gt;

&lt;p&gt;This is hardly a practical method, but it gives you an idea of how you can use Around Aliases to avoid creating circular dependencies when you’re overriding methods.&lt;/p&gt;

&lt;p&gt;Hook Methods in Ruby&lt;/p&gt;

&lt;p&gt;Class#inherited and Module#included are great tools to use if you want to perform some action when your Class is inherited from, or when someone includes your Module.&lt;/p&gt;

&lt;p&gt;What in the world would you use these for? One clever use in particular is if you’re creating a Module that you know you’ll ALWAYS want to include in a Class’s Eigenclass. In normal human language speak, if you want the methods in your module to be Class Methods and not Instance Methods, you can do something like this:&lt;/p&gt;

&lt;p&gt;```ruby
module AddClassMethods
  def self.included(base)
    base.extend(ClassMethods)
  end&lt;/p&gt;

&lt;p&gt;module ClassMethods
    def method1
      “Method 1 Ran!”
    end
  end
end&lt;/p&gt;

&lt;p&gt;class MyClass
  include AddClassMethods
end&lt;/p&gt;

&lt;p&gt;puts MyClass.method1
=&amp;gt; “Method 1 Ran!”
```&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Mar 2015 14:45:00 -0700</pubDate>
        <link>http://www.melanievanderlugt.com/2015/03/12/book-review-metaprogramming-ruby/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/03/12/book-review-metaprogramming-ruby/</guid>
        
        <category>book-review</category>
        
        
      </item>
    
      <item>
        <title>Book Review: Exceptional Ruby</title>
        <description>&lt;p&gt;Exceptional Ruby (published in 2011) was my second Avdi Grimm book in the last couple of months. This book is a great way to dip your toes into the exception handling pond without getting scared away. I’m a sucker for books that start off with a coding metaphor, and Avdi didn’t disappoint. In the intro, he compares exception handling to the toys and clothes a kid stuffs in his closet right before Mom comes to inspect his room. Like a kid cleaning his room, a lot of programmers leave exception handling until last minute, more of an “oh crap!” afterthought than an important well-planned piece of your program.&lt;/p&gt;

&lt;p&gt;Failure handling is the underdog that finally gets its time to shine in Exceptional Ruby. Avdi provides example after example of great ways to raise and handle exceptions, many of which I never would’ve thought up on my own out of the blue. If you read this book and don’t feel exceptionally enlightened (pun totally intended), you must be an exceptional genius already. (Is it bad form to use the same pun twice in one sentence?)&lt;/p&gt;

&lt;h2 id=&quot;a-few-quick-tidbits-i-never-want-to-forget&quot;&gt;A Few Quick Tidbits I Never Want to Forget&lt;/h2&gt;

&lt;p&gt;I’ll let you in on a secret. I mostly write book reviews for my own personal benefit. Sometimes there’s just not enough space in my head to store the info I want to keep in there. Blog posts are an extension of my brain that I can come back and find again later. In Exceptional Ruby, Avdi touched on a few things I know I’ll want to remember:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In Ruby, &lt;code&gt;raise&lt;/code&gt; and &lt;code&gt;fail&lt;/code&gt; are synonyms. Neither is a Ruby keyword. Rather, they’re Kernel methods, so they &lt;strong&gt;can&lt;/strong&gt; be overriden!&lt;/li&gt;
  &lt;li&gt;The currently active exception is always stored in the global variable &lt;code&gt;$!&lt;/code&gt;. If there is no active exception, &lt;code&gt;$!&lt;/code&gt; will be nil.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;code&gt;begin&lt;/code&gt; keyword is considered by some to be a code smell in Ruby. Instead of peppering your code with lots of &lt;code&gt;begin&lt;/code&gt;, &lt;code&gt;rescue&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt; blocks, take advantage of Ruby’s implicit begin blocks:&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; def foo
   # main logic
 rescue
   # handle failures here. No explicit begin or end necessary, hooray!
 end
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;A bare &lt;code&gt;rescue&lt;/code&gt; will catch only &lt;code&gt;StandardError&lt;/code&gt; and any derived classes. It will not catch these puppies:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;NoMemoryError&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;LoadError&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;NotImplementedError&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;SignalException&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;Interrupt&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;ScriptError&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;exceptional-ideas-from-exceptional-ruby&quot;&gt;Exceptional Ideas from Exceptional Ruby&lt;/h2&gt;

&lt;h3 id=&quot;nested-exceptions&quot;&gt;Nested Exceptions&lt;/h3&gt;
&lt;p&gt;In Ruby, it’s possible to raise a new exception while we’re in the process of handling a previously incurred exception. When this occurs, the original exception is thrown away, completely gone, &lt;em&gt;unless&lt;/em&gt; you utilize the idea of Nested Exceptions that Avdi introduces in his book.&lt;/p&gt;

&lt;p&gt;Nested Exceptions hold a reference to the original exception so that it isn’t thrown away. Here’s how you’d do it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StandardError&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;   &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:original&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;vg&quot;&gt;$!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;     &lt;span class=&quot;vi&quot;&gt;@original&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Error A&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Error B&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Current failure: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;   &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Original failure: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;original&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Running this code produces the output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current failure: #&amp;lt;MyError: Error B&amp;gt;
Original failure: #&amp;lt;RuntimeError: Error A&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s happening here? We created our own error class called &lt;code&gt;MyError&lt;/code&gt; that stores any currently active exception in &lt;code&gt;original&lt;/code&gt; and sends &lt;code&gt;msg&lt;/code&gt; up to its parent &lt;code&gt;StandardError&lt;/code&gt; object via the call to &lt;code&gt;super&lt;/code&gt;. As we’d expect, our current failure is set to Error B (our most recent failure), which is of type &lt;code&gt;MyError&lt;/code&gt;. The key thing to note in this example is that we still have access to Error A &lt;em&gt;through&lt;/em&gt; Error B by calling &lt;code&gt;error.original&lt;/code&gt;. (Note that Error A is a &lt;code&gt;RuntimeError&lt;/code&gt; because this is the default exception type when you use just a bare &lt;code&gt;raise&lt;/code&gt;.)&lt;/p&gt;

&lt;h3 id=&quot;code-bulkheads&quot;&gt;Code Bulkheads&lt;/h3&gt;
&lt;p&gt;Nobody wants their code to sink like the Titanic. In ship-speak, bulkheads are placed between ship compartments so that a leak in one compartment will not spread to others. This enables a ship to stay afloat even if one of its compartments is completely flooded. The Titanic had inadequate bulkheads, whith turned out to be a devastating design flaw.&lt;/p&gt;

&lt;p&gt;Exceptional Ruby discusses the concept of erecting Bulkheads in your code to stop cascading failures. This isolates parts of your codes from others so that a failure in one area doesn’t cause other parts of the ship to go down.&lt;/p&gt;

&lt;p&gt;It’s a good idea to place bulkheads between your app and External Services and External processes. One easy way &lt;em&gt;Exceptional Ruby&lt;/em&gt; shows us how to do this is to rescue exceptions and write them to a log instead of bringing down the program:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# External Web Request&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HTTParty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http://www.reddit.com/r/pics&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# Everyone loves a good HTTParty&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;External Web Request encountered an Exception.&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backtrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;circuit-breakers&quot;&gt;Circuit Breakers&lt;/h3&gt;
&lt;p&gt;Another way to handle failures is using the Circuit Breaker pattern, which Avdi references from Michael Nygard’s book &lt;em&gt;Release It!&lt;/em&gt; Circuit breakers are essentially a way of counting failures in particular areas of your App.&lt;/p&gt;

&lt;p&gt;When a threshold is met for one component of your program, a “circuit breaker” opens and that component isn’t permitted to operate. After a period of time, the circuit breaker enters a half-open state, where one failure can cause it to open again. Normal operation is the “closed” state. Check out Will Sargent’s &lt;a href=&quot;https://github.com/wsargent/circuit_breaker&quot;&gt;Ruby Implementation&lt;/a&gt;  of this pattern on Github.&lt;/p&gt;

&lt;h3 id=&quot;allow-for-user-injected-failure-policies&quot;&gt;Allow for User-injected Failure Policies&lt;/h3&gt;
&lt;p&gt;I &lt;em&gt;love&lt;/em&gt; this exceptional method of handling exceptions. (There’s that pesky pun again…) It’s as simple as this - defer to the method caller!&lt;/p&gt;

&lt;p&gt;Avdi refers to this as “caller-supplied fallback strategy”. In my &lt;a href=&quot;http://www.melanievanderlugt.com/2015/02/02/book-review-confident-ruby/&quot;&gt;previous book review about Confident Ruby&lt;/a&gt;, I raved about using the Hash fetch method to assert the presence of hash keys.&lt;/p&gt;

&lt;p&gt;In &lt;em&gt;Exceptional Ruby&lt;/em&gt;, I learned that you can pass a block to the fetch method that tells it how to respond to failures! This gives the caller the power to dictate the policy for missing keys, instead of having a policy foisted upon them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:required_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ZOMG that required key doesn&amp;#39;t exist!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can write your own methods so that you let callers determine what to do if something goes awry. Here’s a super simple example to show you how a method can be structured if you want users to provide their own way of handling unexpected behavior:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;render_book_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; by &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, I’ve assumed you have a book object with title and author attributes. If an instance of book doesn’t have either of these attributes, we have a problem. The caller needs to provide a way of handling this problem in the form of a code block. There are a couple ways the caller might handle this.&lt;/p&gt;

&lt;p&gt;Perhaps you want the &lt;code&gt;render_book_details&lt;/code&gt; method to return a default string if the book title and author aren’t present:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;print_book_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mybook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Book title or author not found.&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could also raise an exception instead of returning a default string. That’s easy too!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;print_book_details&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mybook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Book is missing title or author.&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The user can provide any number of code blocks to handle errors in this situation. What’s truly important is that the power lies with the caller, not with the method author.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Mar 2015 07:45:00 -0700</pubDate>
        <link>http://www.melanievanderlugt.com/2015/03/12/book-review-exceptional-ruby/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/03/12/book-review-exceptional-ruby/</guid>
        
        <category>book-review</category>
        
        
      </item>
    
      <item>
        <title>Book Review: Growth Hacker Marketing</title>
        <description>&lt;p&gt;To be honest, it will probably take me longer to write a review for this book than it would for you to just go out and read it. I’m serious. According to my Kindle, I’m was 7% into the book by the time I reached the Intro section. Almost every “page turn” on my Kindle earned me an additional 1% towards completion. This book is either very short or I am a magically fast reader. I’m afraid it’s probably the latter.&lt;/p&gt;

&lt;p&gt;Ryan Holiday’s Growth Hacker Marketing (published in 2013) is all about getting rid of all your old ideas about marketing. It’s full of stories about successful companies that used new, innovative techniques to become successful in remarkably short amounts of time. The bottom line of the book is that you should study your customers and build the product that they truly want, not the product that you think they want.&lt;/p&gt;

&lt;p&gt;What this book lacks in concrete step-by-step help in putting together your marketing plan, it makes up for in enthusiasm and motivation. There’s something about reading other companies’ success stories that gets my mind racing with possibilities and makes me excited to get to work. I didn’t find it as helpful or concrete as books like The Lean Startup or Traction, but I might re-read it later when I’m feeling low on motivation.&lt;/p&gt;

&lt;p&gt;The added bonus? Read this book and you’ll finally learn how Airbnb picked their name!&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Feb 2015 04:00:00 -0800</pubDate>
        <link>http://www.melanievanderlugt.com/2015/02/23/book-review-growth-hacker-marketing/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/02/23/book-review-growth-hacker-marketing/</guid>
        
        <category>book-review</category>
        
        
      </item>
    
      <item>
        <title>My Github Pages Site is Born! Hello World.</title>
        <description>Step 1: Get a Github account
Step 2: Set up Github Pages https://pages.github.com/
Step 3: Call out the correct version of Ruby. I opted to use Ruby 2.0.0 by typing rvm use 2.0.0. At the time I wrote this blog post, it&#39;s ok to use 1.9.3 or 2.0.0 according to https://help.github.com/articles/using-jekyll-with-pages/ . Follow the instructions https://help.github.com/articles/using-jekyll-with-pages/ here to be sure you get everything set up correctly. It can be good to specify your Ruby version in your Gemfile too, so if your RVM settings ever get out of whack, you&#39;ll be ok. Here&#39;s my Gemfile contents:

source &#39;https://rubygems.org&#39;
ruby &#39;2.0.0&#39; 

gem &#39;github-pages&#39;

Step 4: If you followed the Github pages instructions in step 2 correctly, you already have a page at githubusername.github.io that says &quot;Hello World&quot;. Let&#39;s try getting that up and running on your local machine. To do that, simply type &quot;jekyll serve&quot; in your terminal. ctrl-c stops the server. This is how you can use Jekyll to preview your website before pushing it up to Github!

</description>
        <pubDate>Mon, 02 Feb 2015 12:07:35 -0800</pubDate>
        <link>http://www.melanievanderlugt.com/2015/02/02/hello-world-a-github-pages-site-is-born/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/02/02/hello-world-a-github-pages-site-is-born/</guid>
        
        
      </item>
    
      <item>
        <title>Book Review: Confident Ruby</title>
        <description>&lt;p&gt;I love the idea that a tech talk can evolve into a full fledged book, which is exactly how Avdi Grimm’s book, Confident Ruby, came about. According to the preface, Avdi gave his first tech talk, called “Confident Code”, to a room full of Rubyists in Baltimore in 2010. He goes on to say that his Confident Code talk receives the most positive feedback of any of his talks, and I think that’s for very good reason. The ideas that are laid out in this book are awesome.&lt;/p&gt;

&lt;p&gt;Before reading Confident Ruby, I hadn’t thought about categorizing code as timid or confident. We’ve all probably accused code of being poorly organized, convoluted, maybe even overly clever, but I previously only thought of timidity and confidence as people-oriented traits. It’s eye opening to think of code as being timid or confident. Is my code shy? Am I checking for nil all over the place? Is my code confidently laying out the story I want to tell? These are all questions Avdi’s book can help you answer about your own code. (The coding patterns in Confident Ruby can help you fix timidity, too!)&lt;/p&gt;

&lt;p&gt;Confident Ruby (published in 2013), is a must-read for any Ruby newbie. In fact, I enjoyed reading it so much that it might just join my read-again-every-year book list. It definitely earned itself a permanent home on my Kindle.&lt;/p&gt;

&lt;h2 id=&quot;the-3-concepts-from-confident-ruby-that-i-liked-the-most&quot;&gt;The 3 Concepts from Confident Ruby That I Liked the Most&lt;/h2&gt;

&lt;h3 id=&quot;your-code-should-tell-a-story&quot;&gt;#1: Your Code Should Tell a Story&lt;/h3&gt;

&lt;p&gt;Choose your own adventure books were a fun part of childhood, but there’s no place for them in code today. Trying to read spaghetti code is a little like trying to read a choose-your-own-adventure book from cover to cover. It’s confusing, there are too many things to keep track of, and you seem to jump backwards and forwards in time. There is no compelling narrative and a clear story doesn’t emerge.&lt;/p&gt;

&lt;p&gt;According to Confident Ruby, your code should have a compelling narrative; it should tell a clear story. In order to tell that story confidently and clearly, the book suggests organizing methods into Four Parts, in this order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Collecting Input &lt;/li&gt;
  &lt;li&gt;Performing Work&lt;/li&gt;
  &lt;li&gt;Delivering Output&lt;/li&gt;
  &lt;li&gt;Handling Failures&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following this rule of thumb helps organize code into clearly defined chunks with clearly defined purposes. It leaves failure handling until the end of the method so it doesn’t distract from the method’s main purpose. I recommend checking out the companion video that comes with Confident Ruby to watch Avdi put this theory to work in some real-life out-there-in-the-wild code.&lt;/p&gt;

&lt;h3 id=&quot;use-fetch-instead-of-nil-checking&quot;&gt;#2: Use Fetch instead of nil checking&lt;/h3&gt;

&lt;p&gt;One pattern presented in Confident Ruby that I’ll immediately start utilizing in my projects is the use of #fetch to assert the presence of Hash keys. If you have a method that takes a hash as input, and some of your hash elements are non-optional, this is a great pattern to latch onto. Strip unnecessary “if” statements out of your method that test for the presence of the keys and instead call fetch.&lt;/p&gt;

&lt;p&gt;Instead of:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_first_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;required_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:required_input&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;required_input&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ArgumentError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;required input was not supplied!&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can simply use this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_better_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;required_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:required_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Clear. Concise. Fabulous. It’s important to understand that the #fetch method is checking for the presence of the KEY; it has nothing to do with the actual value stored with that key. In the first method, it’s possible that if our required_input key holds the value “false”, we could erroneously raise an exception claiming that we weren’t provided with the right inputs. In the second method, if the value for the required_input key is FALSE, it’s still considered an acceptable input. As Avdi so eloquently puts it, by using #fetch, we are “differentiating between missing keys and falsey values”.&lt;/p&gt;

&lt;p&gt;But what is the coolest thing about using the #fetch method? You can send in a block that will be evaluated when the key you’re attempting to fetch is missing! Using this feature, it’s possible to add more descriptive messages to your exceptions, or raise different types of exceptions altogether.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;my_better_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;required_input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myhash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:required_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KeyError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;The required_input was not supplied!&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Awesome!&lt;/p&gt;

&lt;h3 id=&quot;take-advantage-of-rubys-built-in-conversion-functions&quot;&gt;#3: Take advantage of Ruby’s Built-in Conversion Functions&lt;/h3&gt;

&lt;p&gt;Most Ruby Devs are familiar with conversion methods like #to_i and #to_a. Until I read Confident Ruby, I wasn’t aware that Ruby has a different set of capitalized conversion functions: Integer(), Array(), Float(), String(), Rational(), and Complex().&lt;/p&gt;

&lt;p&gt;In the book, Avdi explains that these capitalized conversion functions are great for converting inputs into your desired data type, but here’s the kicker - it only successfully converts values when there is a sensible way of doing it. As an example, you could look at this case:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; 2.1.2 :001 &amp;gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;this is definitely a string, not a number&amp;quot;&lt;/span&gt;.to_i
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 2.1.2 :002 &amp;gt; Integer&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;this is definitely a string, not a number&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; ArgumentError: invalid value &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; Integer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;this is definitely a string, not a number&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using #to_i converts our string into zero. That doesn’t make a whole lot of sense to me, and I wouldn’t want to do that without knowing exactly why I’m doign it.&lt;/p&gt;

&lt;p&gt;In most cases, it just doesn’t make sense to convert a string into an integer. If you use #to_i instead of the more strict Integer conversion function, you could inadvertently be letting nonsensical values into your application. It can be a good idea to just alert the user with an Error when your program receives something it doesn’t make sense to convert.&lt;/p&gt;

&lt;h3 id=&quot;the-verdict-a-must-read&quot;&gt;The Verdict: A Must Read&lt;/h3&gt;
&lt;p&gt;If you’re a Rubyist and haven’t had a look at this book yet, I highly recommend giving it a read. It’s quick to get through, easy to absorb, and definitely deserves a spot on your shelf of code references. Plus, it contains emergency kittens. Perfect for times when those coding examples become a little bit too intense and you just need a chuckle.&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Feb 2015 04:00:00 -0800</pubDate>
        <link>http://www.melanievanderlugt.com/2015/02/02/book-review-confident-ruby/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/02/02/book-review-confident-ruby/</guid>
        
        <category>book-review</category>
        
        
      </item>
    
      <item>
        <title>Oh Hey There, World.</title>
        <description>&lt;p&gt;Welcome to my online portfolio! I&#39;ll be posting book reviews, snippets about my work with various APIs, and writeups of various Rails side projects I&#39;ve been working on.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Jan 2015 11:30:00 -0800</pubDate>
        <link>http://www.melanievanderlugt.com/2015/01/20/a-blog-is-born/</link>
        <guid isPermaLink="true">http://www.melanievanderlugt.com/2015/01/20/a-blog-is-born/</guid>
        
        
      </item>
    
  </channel>
</rss>
